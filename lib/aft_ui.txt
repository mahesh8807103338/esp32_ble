import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:skm_notification_listener/skm_notification_listener.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:developer';

void main() {
  runApp(NotificationApp());
}

class NotificationApp extends StatefulWidget {
  @override
  _NotificationAppState createState() => _NotificationAppState();
}

class _NotificationAppState extends State<NotificationApp>
    with SingleTickerProviderStateMixin {
  String notificationText = "Waiting for notifications...";
  bool isConnected = false;
  bool isIronManTheme = true; // Toggle between Iron Man & Black Panther themes
  BluetoothDevice? selectedDevice;
  BluetoothCharacteristic? writeCharacteristic;
  List<BluetoothDevice> availableDevices = [];
  bool isScanning = false;

  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  final String esp32ServiceUUID = "12345678-1234-5678-1234-56789abcdef0";
  final String esp32CharacteristicUUID = "87654321-4321-8765-4321-abcdef012345";

  @override
  void initState() {
    super.initState();
    _requestPermissions();
    _startBluetoothScan();
    _startListeningNotifications();

    // Animation setup
    _animationController =
        AnimationController(vsync: this, duration: Duration(milliseconds: 800));
    _fadeAnimation = Tween<double>(begin: 0, end: 1).animate(
        CurvedAnimation(parent: _animationController, curve: Curves.easeIn));
  }

  /// Request Permissions
  Future<void> _requestPermissions() async {
    await Permission.bluetooth.request();
    await Permission.bluetoothScan.request();
    await Permission.bluetoothConnect.request();
    await Permission.location.request();
    await Permission.notification.request();
  }

  /// Start Scanning for Bluetooth Devices
  void _startBluetoothScan() async {
    setState(() => isScanning = true);
    availableDevices.clear();

    FlutterBluePlus.startScan(timeout: Duration(seconds: 5));
    FlutterBluePlus.scanResults.listen((results) {
      for (ScanResult result in results) {
        if (!availableDevices.contains(result.device)) {
          setState(() {
            availableDevices.add(result.device);
          });
        }
      }
    });

    await Future.delayed(Duration(seconds: 5));
    FlutterBluePlus.stopScan();
    setState(() => isScanning = false);
  }

  /// Listen for Notifications & Send to ESP32
  void _startListeningNotifications() {
    SkmNotificationListener.notificationsStream.listen((event) {
      setState(() {
        notificationText = "${event.title}: ${event.content}";
      });

      _animationController.forward(from: 0); // Animate the notification card

      if (isConnected && writeCharacteristic != null) {
        _sendDataToESP32(notificationText);
      } else {
        log("‚ö†Ô∏è Not connected to ESP32.");
      }
    });
  }

  /// Connect to ESP32
  Future<void> _connectToDevice(BluetoothDevice device) async {
    try {
      log("üîÑ Connecting to ${device.name}...");
      await device.connect(autoConnect: false, timeout: Duration(seconds: 10));

      setState(() {
        selectedDevice = device;
        isConnected = true;
      });

      selectedDevice!.connectionState.listen((state) {
        log("üîÑ Connection State: $state");
        if (state == BluetoothConnectionState.disconnected) {
          setState(() {
            isConnected = false;
            selectedDevice = null;
            writeCharacteristic = null;
          });
          log("‚ùå Disconnected from ESP32");
        }
      });

      List<BluetoothService> services = await device.discoverServices();
      for (var service in services) {
        if (service.uuid.toString() == esp32ServiceUUID) {
          for (var characteristic in service.characteristics) {
            if (characteristic.uuid.toString() == esp32CharacteristicUUID &&
                characteristic.properties.write) {
              setState(() {
                writeCharacteristic = characteristic;
              });
              log("‚úÖ Connected & Found Characteristic");
              return;
            }
          }
        }
      }

      log("‚ùå No writable characteristic found!");
      setState(() => isConnected = false);
    } catch (e) {
      log("‚ùå Connection Failed: $e");
      setState(() => isConnected = false);
    }
  }

  /// Send Data to ESP32
  Future<void> _sendDataToESP32(String data) async {
    if (writeCharacteristic != null) {
      try {
        List<int> bytes = data.codeUnits;
        await writeCharacteristic!.write(bytes);
        log("‚úÖ Sent to ESP32: $data");
      } catch (e) {
        log("‚ùå Error Sending Data: $e");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: isIronManTheme ? ironManTheme : blackPantherTheme,
      home: Scaffold(
        appBar: AppBar(
          title: Text(isConnected ? "‚úÖ Connected" : "üî¥ Not Connected"),
          actions: [
            IconButton(
              icon: Icon(Icons.color_lens),
              onPressed: () => setState(() => isIronManTheme = !isIronManTheme),
            )
          ],
        ),
        body: Stack(
          children: [
            Positioned.fill(
              child: AnimatedOpacity(
                opacity: isIronManTheme ? 0.2 : 0.4,
                duration: Duration(seconds: 1),
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: isIronManTheme
                          ? [Colors.red.shade900, Colors.yellow.shade700]
                          : [Colors.black, Colors.deepPurple.shade700],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                  ),
                ),
              ),
            ),
            Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  FadeTransition(
                    opacity: _fadeAnimation,
                    child: Card(
                      color: Colors.white.withOpacity(0.1),
                      elevation: 8,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15)),
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Text(notificationText,
                            textAlign: TextAlign.center,
                            style: TextStyle(fontSize: 18, color: Colors.white)),
                      ),
                    ),
                  ),
                  SizedBox(height: 20),
                  DropdownButton<BluetoothDevice>(
                    hint: Text("Select Device", style: TextStyle(color: Colors.white)),
                    value: selectedDevice,
                    items: availableDevices.map((device) {
                      return DropdownMenuItem(
                        value: device,
                        child: Text(device.name.isNotEmpty
                            ? device.name
                            : "Unknown Device"),
                      );
                    }).toList(),
                    onChanged: (device) {
                      if (device != null) _connectToDevice(device);
                    },
                  ),
                  SizedBox(height: 20),
                  FloatingActionButton(
                    onPressed: isScanning ? null : _startBluetoothScan,
                    child: Icon(isScanning ? Icons.hourglass_empty : Icons.refresh),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// **Themes**
final ThemeData ironManTheme = ThemeData(primarySwatch: Colors.red);
final ThemeData blackPantherTheme = ThemeData(primarySwatch: Colors.deepPurple);
